function dlNode(value)
{
  if (!(this instanceof dlNode)) 
  {
    return new dlNode(value);
  }
  this.val = value;
  this.prev = null;
  this.next = null;
}

function dList()
{
  if (!(this instanceof dList)) 
  {
    return new dList();
  }
  this.head = null;
  this.tail = null;
}

node1 = new dlNode(1);
node2 = new dlNode(2);
node3 = new dlNode(3);
node4 = new dlNode(4);
node1.next = node2;
node2.next = node3;
node2.prev = node1
node3.next = node4;
node3.prev = node2;
node4.prev = node3

list = new dList();
list.head = node1;
list.tail = node4;

// console.log(list);


function prevendVal(list, newVal, searchVal){
//   when list is empty
  if(!list.head){
    return null;
  }
  var newNode = new dlNode(newVal);
 // when list size of 1 & assuming tail has been assigned
  if(list.head.val === searchVal){
    tmp = list.head;
    list.head = newNode;
    tmp.prev = newNode;
    newNode.next = tmp;
    return true;
  }
  var currentNode = list.head;
  while(currentNode){
    if(currentNode.val == searchVal){
      before = currentNode.prev;
      after = currentNode;
      before.next = newNode;
      newNode.prev = before;
      newNode.next = after;
      currentNode.prev = newNode;
      return true;
    }
    currentNode = currentNode.next;
  }
  return false
}

console.log(prevendVal(list, 0.5,61));

function kthToLast(list, k){
//   Empty list
  if(!list.head && !list.tail){
    return null;
  }
//   Return list if k is 0 or less than 0
  if(k <= 0){
    return list;
  }
  var currentNode = list.tail;
  var countNodes = 1;
  while(currentNode){
//     if kth is bigger than list nodes, return whole list
    if(currentNode.prev === null && k > countNodes){
      return list;
//   when kth is equal to nodes, set prev to null
    }else if(k == countNodes){
      currentNode.prev = null;
      return currentNode;
    }
    countNodes += 1;
    currentNode = currentNode.prev
  }
}

console.log(kthToLast(list, 4));

function isValidDlist(list){
//  return false if there is no head or tail
  if(!list.head || !list.tail){
    return false;
  }
//   assuming its a size of 1, return false if prev is defined
  if(!list.head.next){
    if(list.head.prev){
      return false;
    }
  }
  if(list.head.next){
    var currentNode = list.head.next;
    while(currentNode){
//       when currentNode reaches to end of list
      if(!currentNode.next){
        if(currentNode != list.tail){
          return false;
        }
        return true;
//         when currentNode has a next, it must have a prev
      }else{
        if(!currentNode.prev){
          return false;
        }
      }
      currentNode = currentNode.next;
    }
    return true;
  }
  return true;
}
console.log(isValidDlist(list));

function isPalindrome(list){
  if(!list.head || !list.tail){
    return false;
  }
  var previousNode = list.tail;
  var values = []
  while(previousNode){
    values.push(previousNode.val);
    previousNode = previousNode.prev;
  }
  var currentNode = list.head;
  var counter = 0;
  var isValid = true;
  while(currentNode){
    if(currentNode.val != values[counter]){
      isValid = false
    }
    counter += 1;
    currentNode = currentNode.next;
  }
  return isValid;
}


